"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const rds = require("@aws-cdk/aws-rds");
const ec2 = require("@aws-cdk/aws-ec2");
class PetclinicVPCStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.vpc = new ec2.Vpc(this, 'VPC');
        this.privateSubnets = this.vpc.selectSubnets({ subnetType: ec2.SubnetType.PRIVATE_WITH_NAT });
        this.dbSecurityGroup = new ec2.SecurityGroup(this, 'SG-DB', {
            vpc: this.vpc
        });
        this.appSecurityGroup = new ec2.SecurityGroup(this, 'SG-APP', {
            vpc: this.vpc
        });
        this.dbSecurityGroup.addIngressRule(this.appSecurityGroup, ec2.Port.tcp(3306), 'Mysql default port for the app layer');
        this.appSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(8080), 'App port from anywhere');
        new cdk.CfnOutput(this, 'appSecurityGroup', {
            value: this.appSecurityGroup.securityGroupId,
            description: 'Security group for the application.',
            exportName: 'appSecurityGroup'
        });
    }
}
class PetclinicDBStack extends cdk.Stack {
    constructor(scope, id, vpc, privateSubnets, dbSecurityGroup, props) {
        super(scope, id, props);
        this.mysql = new rds.DatabaseInstance(this, 'DB-MAIN', {
            databaseName: 'petclinic',
            instanceIdentifier: 'PETCLINIC-DB',
            engine: rds.DatabaseInstanceEngine.mysql({
                version: rds.MysqlEngineVersion.VER_5_7_34
            }),
            vpc: vpc,
            vpcSubnets: privateSubnets,
            securityGroups: [dbSecurityGroup],
            deletionProtection: false,
            multiAz: false,
            credentials: {
                username: 'petclinic',
                password: cdk.SecretValue.plainText('p3tcl1n1c')
            }
        });
        new cdk.CfnOutput(this, 'dbURL', {
            value: this.mysql.dbInstanceEndpointAddress,
            description: 'Database instance endpoint.',
            exportName: 'dbEndpoint'
        });
    }
}
const app = new cdk.App();
const globalTags = {
    'project': 'aws-app-runner-workshop',
    'owner': process.env.USER
};
const vpcStack = new PetclinicVPCStack(app, 'petclinic-VPC-' + process.env.USER, {
    tags: globalTags
});
const dbStack = new PetclinicDBStack(app, 'petclinic-DB-' + process.env.USER, vpcStack.vpc, vpcStack.privateSubnets, vpcStack.dbSecurityGroup, {
    tags: globalTags
});
dbStack.addDependency(vpcStack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0Qyx3Q0FBeUM7QUFDekMsd0NBQXlDO0FBRXpDLE1BQU0saUJBQWtCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFPdkMsWUFBWSxLQUFjLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO1FBRTVGLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDMUQsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1NBQ2QsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQzVELEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztTQUNkLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxzQ0FBc0MsQ0FBQyxDQUFDO1FBQ3ZILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRXZHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7WUFDMUMsS0FBSyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1lBQzVDLFdBQVcsRUFBRSxxQ0FBcUM7WUFDbEQsVUFBVSxFQUFFLGtCQUFrQjtTQUMvQixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGdCQUFpQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBR3RDLFlBQVksS0FBYyxFQUFFLEVBQVUsRUFDMUIsR0FBWSxFQUFFLGNBQW1DLEVBQ2pELGVBQW1DLEVBQ25DLEtBQXNCO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUNyRCxZQUFZLEVBQUcsV0FBVztZQUMxQixrQkFBa0IsRUFBRyxjQUFjO1lBQ25DLE1BQU0sRUFBRyxHQUFHLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDO2dCQUN4QyxPQUFPLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLFVBQVU7YUFDM0MsQ0FBQztZQUNGLEdBQUcsRUFBRyxHQUFHO1lBQ1QsVUFBVSxFQUFHLGNBQWM7WUFDM0IsY0FBYyxFQUFFLENBQUMsZUFBZSxDQUFDO1lBQ2pDLGtCQUFrQixFQUFHLEtBQUs7WUFDMUIsT0FBTyxFQUFHLEtBQUs7WUFDZixXQUFXLEVBQUc7Z0JBQ1osUUFBUSxFQUFHLFdBQVc7Z0JBQ3RCLFFBQVEsRUFBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7YUFDbEQ7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUMvQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyx5QkFBeUI7WUFDM0MsV0FBVyxFQUFFLDZCQUE2QjtZQUMxQyxVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLFVBQVUsR0FBRztJQUNqQixTQUFTLEVBQUcseUJBQXlCO0lBQ3JDLE9BQU8sRUFBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUs7Q0FDNUIsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO0lBQy9FLElBQUksRUFBRSxVQUFVO0NBQ2pCLENBQUMsQ0FBQztBQUVILE1BQU0sT0FBTyxHQUFHLElBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFLGVBQWUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFDMUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDakUsSUFBSSxFQUFFLFVBQVU7Q0FDakIsQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jb3JlJyk7XG5pbXBvcnQgcmRzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXJkcycpO1xuaW1wb3J0IGVjMiA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lYzInKTtcblxuY2xhc3MgUGV0Y2xpbmljVlBDU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICByZWFkb25seSB2cGMgOiBlYzIuVnBjO1xuICByZWFkb25seSBwcml2YXRlU3VibmV0czogZWMyLlNlbGVjdGVkU3VibmV0cztcblxuICByZWFkb25seSBkYlNlY3VyaXR5R3JvdXAgOiBlYzIuU2VjdXJpdHlHcm91cDtcbiAgcmVhZG9ubHkgYXBwU2VjdXJpdHlHcm91cDogZWMyLlNlY3VyaXR5R3JvdXA7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMudnBjID0gbmV3IGVjMi5WcGModGhpcywgJ1ZQQycpO1xuXG4gICAgdGhpcy5wcml2YXRlU3VibmV0cyA9IHRoaXMudnBjLnNlbGVjdFN1Ym5ldHMoe3N1Ym5ldFR5cGU6IGVjMi5TdWJuZXRUeXBlLlBSSVZBVEVfV0lUSF9OQVR9KTtcblxuICAgIHRoaXMuZGJTZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsICdTRy1EQicsIHtcbiAgICAgIHZwYzogdGhpcy52cGNcbiAgICB9KTtcbiAgICB0aGlzLmFwcFNlY3VyaXR5R3JvdXAgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAodGhpcywgJ1NHLUFQUCcsIHtcbiAgICAgIHZwYzogdGhpcy52cGNcbiAgICB9KTtcbiAgICB0aGlzLmRiU2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZSh0aGlzLmFwcFNlY3VyaXR5R3JvdXAsIGVjMi5Qb3J0LnRjcCgzMzA2KSwgJ015c3FsIGRlZmF1bHQgcG9ydCBmb3IgdGhlIGFwcCBsYXllcicpO1xuICAgIHRoaXMuYXBwU2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShlYzIuUGVlci5hbnlJcHY0KCksIGVjMi5Qb3J0LnRjcCg4MDgwKSwgJ0FwcCBwb3J0IGZyb20gYW55d2hlcmUnKTtcblxuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdhcHBTZWN1cml0eUdyb3VwJywge1xuICAgICAgdmFsdWU6IHRoaXMuYXBwU2VjdXJpdHlHcm91cC5zZWN1cml0eUdyb3VwSWQsXG4gICAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IGdyb3VwIGZvciB0aGUgYXBwbGljYXRpb24uJyxcbiAgICAgIGV4cG9ydE5hbWU6ICdhcHBTZWN1cml0eUdyb3VwJ1xuICAgIH0pOyAgICBcbiAgfVxufVxuXG5jbGFzcyBQZXRjbGluaWNEQlN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgcmVhZG9ubHkgbXlzcWw6IHJkcy5EYXRhYmFzZUluc3RhbmNlO1xuICBcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIFxuICAgICAgICAgICAgICB2cGM6IGVjMi5WcGMsIHByaXZhdGVTdWJuZXRzOiBlYzIuU2VsZWN0ZWRTdWJuZXRzLCBcbiAgICAgICAgICAgICAgZGJTZWN1cml0eUdyb3VwIDogZWMyLlNlY3VyaXR5R3JvdXAsXG4gICAgICAgICAgICAgIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMubXlzcWwgPSBuZXcgcmRzLkRhdGFiYXNlSW5zdGFuY2UodGhpcywgJ0RCLU1BSU4nLCB7XG4gICAgICBkYXRhYmFzZU5hbWUgOiAncGV0Y2xpbmljJyxcbiAgICAgIGluc3RhbmNlSWRlbnRpZmllciA6ICdQRVRDTElOSUMtREInLFxuICAgICAgZW5naW5lIDogcmRzLkRhdGFiYXNlSW5zdGFuY2VFbmdpbmUubXlzcWwoe1xuICAgICAgICB2ZXJzaW9uOiByZHMuTXlzcWxFbmdpbmVWZXJzaW9uLlZFUl81XzdfMzRcbiAgICAgIH0pLCAgICAgICBcbiAgICAgIHZwYyA6IHZwYyxcbiAgICAgIHZwY1N1Ym5ldHMgOiBwcml2YXRlU3VibmV0cyxcbiAgICAgIHNlY3VyaXR5R3JvdXBzOiBbZGJTZWN1cml0eUdyb3VwXSxcbiAgICAgIGRlbGV0aW9uUHJvdGVjdGlvbiA6IGZhbHNlLFxuICAgICAgbXVsdGlBeiA6IGZhbHNlLFxuICAgICAgY3JlZGVudGlhbHMgOiB7XG4gICAgICAgIHVzZXJuYW1lIDogJ3BldGNsaW5pYycsXG4gICAgICAgIHBhc3N3b3JkIDogY2RrLlNlY3JldFZhbHVlLnBsYWluVGV4dCgncDN0Y2wxbjFjJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnZGJVUkwnLCB7XG4gICAgICB2YWx1ZTogdGhpcy5teXNxbC5kYkluc3RhbmNlRW5kcG9pbnRBZGRyZXNzLFxuICAgICAgZGVzY3JpcHRpb246ICdEYXRhYmFzZSBpbnN0YW5jZSBlbmRwb2ludC4nLFxuICAgICAgZXhwb3J0TmFtZTogJ2RiRW5kcG9pbnQnXG4gICAgfSk7ICAgIFxuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IGdsb2JhbFRhZ3MgPSB7XG4gICdwcm9qZWN0JyA6ICdhd3MtYXBwLXJ1bm5lci13b3Jrc2hvcCcsXG4gICdvd25lcicgOiBwcm9jZXNzLmVudi5VU0VSIVxufTtcblxuY29uc3QgdnBjU3RhY2sgPSBuZXcgUGV0Y2xpbmljVlBDU3RhY2soYXBwLCAncGV0Y2xpbmljLVZQQy0nICsgcHJvY2Vzcy5lbnYuVVNFUiwge1xuICB0YWdzOiBnbG9iYWxUYWdzXG59KTtcblxuY29uc3QgZGJTdGFjayA9IG5ldyBQZXRjbGluaWNEQlN0YWNrKGFwcCwgJ3BldGNsaW5pYy1EQi0nICsgcHJvY2Vzcy5lbnYuVVNFUiwgXG4gIHZwY1N0YWNrLnZwYywgdnBjU3RhY2sucHJpdmF0ZVN1Ym5ldHMsIHZwY1N0YWNrLmRiU2VjdXJpdHlHcm91cCwge1xuICB0YWdzOiBnbG9iYWxUYWdzXG59KTtcbmRiU3RhY2suYWRkRGVwZW5kZW5jeSh2cGNTdGFjayk7XG5cbiJdfQ==
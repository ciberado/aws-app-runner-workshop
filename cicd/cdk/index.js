"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const rds = require("@aws-cdk/aws-rds");
const ec2 = require("@aws-cdk/aws-ec2");
class PetclinicVPCStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.vpc = new ec2.Vpc(this, 'VPC');
        this.privateSubnets = this.vpc.selectSubnets({ subnetType: ec2.SubnetType.PRIVATE_WITH_NAT });
        this.dbSecurityGroup = new ec2.SecurityGroup(this, 'SG-DB', {
            vpc: this.vpc
        });
        this.appSecurityGroup = new ec2.SecurityGroup(this, 'SG-APP', {
            vpc: this.vpc
        });
        this.dbSecurityGroup.addIngressRule(this.appSecurityGroup, ec2.Port.tcp(5432), 'Postgress default port for the app layer');
        this.appSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(8080), 'App port from anywhere');
        new cdk.CfnOutput(this, 'appSecurityGroup', {
            value: this.appSecurityGroup.securityGroupId,
            description: 'Security group for the application.',
            exportName: 'appSecurityGroup'
        });
    }
}
class PetclinicDBStack extends cdk.Stack {
    constructor(scope, id, vpc, privateSubnets, dbSecurityGroup, props) {
        super(scope, id, props);
        this.postgres = new rds.DatabaseInstance(this, 'DB-MAIN', {
            databaseName: 'petclinic',
            instanceIdentifier: 'PETCLINIC-DB',
            engine: rds.DatabaseInstanceEngine.postgres({
                version: rds.PostgresEngineVersion.VER_13_4
            }),
            vpc: vpc,
            vpcSubnets: privateSubnets,
            securityGroups: [dbSecurityGroup],
            deletionProtection: false,
            multiAz: false,
            credentials: {
                username: 'petclinic',
                password: cdk.SecretValue.plainText('p3tcl1n1c')
            }
        });
        new cdk.CfnOutput(this, 'dbURL', {
            value: this.postgres.dbInstanceEndpointAddress,
            description: 'Database instance endpoint.',
            exportName: 'dbEndpoint'
        });
    }
}
const app = new cdk.App();
const globalTags = {
    'project': 'aws-app-runner-workshop',
    'owner': process.env.USER
};
const vpcStack = new PetclinicVPCStack(app, 'petclinic-VPC-' + process.env.USER, {
    tags: globalTags
});
const dbStack = new PetclinicDBStack(app, 'petclinic-DB-' + process.env.USER, vpcStack.vpc, vpcStack.privateSubnets, vpcStack.dbSecurityGroup, {
    tags: globalTags
});
dbStack.addDependency(vpcStack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0Qyx3Q0FBeUM7QUFDekMsd0NBQXlDO0FBRXpDLE1BQU0saUJBQWtCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFPdkMsWUFBWSxLQUFjLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO1FBRTVGLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDMUQsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1NBQ2QsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQzVELEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztTQUNkLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSwwQ0FBMEMsQ0FBQyxDQUFDO1FBQzNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRXZHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7WUFDMUMsS0FBSyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlO1lBQzVDLFdBQVcsRUFBRSxxQ0FBcUM7WUFDbEQsVUFBVSxFQUFFLGtCQUFrQjtTQUMvQixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGdCQUFpQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBR3RDLFlBQVksS0FBYyxFQUFFLEVBQVUsRUFDMUIsR0FBWSxFQUFFLGNBQW1DLEVBQ2pELGVBQW1DLEVBQ25DLEtBQXNCO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUN4RCxZQUFZLEVBQUcsV0FBVztZQUMxQixrQkFBa0IsRUFBRyxjQUFjO1lBQ25DLE1BQU0sRUFBRyxHQUFHLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDO2dCQUMzQyxPQUFPLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLFFBQVE7YUFDNUMsQ0FBQztZQUNGLEdBQUcsRUFBRyxHQUFHO1lBQ1QsVUFBVSxFQUFHLGNBQWM7WUFDM0IsY0FBYyxFQUFFLENBQUMsZUFBZSxDQUFDO1lBQ2pDLGtCQUFrQixFQUFHLEtBQUs7WUFDMUIsT0FBTyxFQUFHLEtBQUs7WUFDZixXQUFXLEVBQUc7Z0JBQ1osUUFBUSxFQUFHLFdBQVc7Z0JBQ3RCLFFBQVEsRUFBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7YUFDbEQ7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUMvQixLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUI7WUFDOUMsV0FBVyxFQUFFLDZCQUE2QjtZQUMxQyxVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLFVBQVUsR0FBRztJQUNqQixTQUFTLEVBQUcseUJBQXlCO0lBQ3JDLE9BQU8sRUFBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUs7Q0FDNUIsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO0lBQy9FLElBQUksRUFBRSxVQUFVO0NBQ2pCLENBQUMsQ0FBQztBQUVILE1BQU0sT0FBTyxHQUFHLElBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFLGVBQWUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFDMUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDakUsSUFBSSxFQUFFLFVBQVU7Q0FDakIsQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jb3JlJyk7XG5pbXBvcnQgcmRzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXJkcycpO1xuaW1wb3J0IGVjMiA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lYzInKTtcblxuY2xhc3MgUGV0Y2xpbmljVlBDU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICByZWFkb25seSB2cGMgOiBlYzIuVnBjO1xuICByZWFkb25seSBwcml2YXRlU3VibmV0czogZWMyLlNlbGVjdGVkU3VibmV0cztcblxuICByZWFkb25seSBkYlNlY3VyaXR5R3JvdXAgOiBlYzIuU2VjdXJpdHlHcm91cDtcbiAgcmVhZG9ubHkgYXBwU2VjdXJpdHlHcm91cDogZWMyLlNlY3VyaXR5R3JvdXA7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMudnBjID0gbmV3IGVjMi5WcGModGhpcywgJ1ZQQycpO1xuXG4gICAgdGhpcy5wcml2YXRlU3VibmV0cyA9IHRoaXMudnBjLnNlbGVjdFN1Ym5ldHMoe3N1Ym5ldFR5cGU6IGVjMi5TdWJuZXRUeXBlLlBSSVZBVEVfV0lUSF9OQVR9KTtcblxuICAgIHRoaXMuZGJTZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsICdTRy1EQicsIHtcbiAgICAgIHZwYzogdGhpcy52cGNcbiAgICB9KTtcbiAgICB0aGlzLmFwcFNlY3VyaXR5R3JvdXAgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAodGhpcywgJ1NHLUFQUCcsIHtcbiAgICAgIHZwYzogdGhpcy52cGNcbiAgICB9KTtcbiAgICB0aGlzLmRiU2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZSh0aGlzLmFwcFNlY3VyaXR5R3JvdXAsIGVjMi5Qb3J0LnRjcCg1NDMyKSwgJ1Bvc3RncmVzcyBkZWZhdWx0IHBvcnQgZm9yIHRoZSBhcHAgbGF5ZXInKTtcbiAgICB0aGlzLmFwcFNlY3VyaXR5R3JvdXAuYWRkSW5ncmVzc1J1bGUoZWMyLlBlZXIuYW55SXB2NCgpLCBlYzIuUG9ydC50Y3AoODA4MCksICdBcHAgcG9ydCBmcm9tIGFueXdoZXJlJyk7XG5cbiAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnYXBwU2VjdXJpdHlHcm91cCcsIHtcbiAgICAgIHZhbHVlOiB0aGlzLmFwcFNlY3VyaXR5R3JvdXAuc2VjdXJpdHlHcm91cElkLFxuICAgICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBncm91cCBmb3IgdGhlIGFwcGxpY2F0aW9uLicsXG4gICAgICBleHBvcnROYW1lOiAnYXBwU2VjdXJpdHlHcm91cCdcbiAgICB9KTsgICAgXG4gIH1cbn1cblxuY2xhc3MgUGV0Y2xpbmljREJTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIHJlYWRvbmx5IHBvc3RncmVzOiByZHMuRGF0YWJhc2VJbnN0YW5jZTtcbiAgXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQXBwLCBpZDogc3RyaW5nLCBcbiAgICAgICAgICAgICAgdnBjOiBlYzIuVnBjLCBwcml2YXRlU3VibmV0czogZWMyLlNlbGVjdGVkU3VibmV0cywgXG4gICAgICAgICAgICAgIGRiU2VjdXJpdHlHcm91cCA6IGVjMi5TZWN1cml0eUdyb3VwLFxuICAgICAgICAgICAgICBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICB0aGlzLnBvc3RncmVzID0gbmV3IHJkcy5EYXRhYmFzZUluc3RhbmNlKHRoaXMsICdEQi1NQUlOJywge1xuICAgICAgZGF0YWJhc2VOYW1lIDogJ3BldGNsaW5pYycsXG4gICAgICBpbnN0YW5jZUlkZW50aWZpZXIgOiAnUEVUQ0xJTklDLURCJyxcbiAgICAgIGVuZ2luZSA6IHJkcy5EYXRhYmFzZUluc3RhbmNlRW5naW5lLnBvc3RncmVzKHtcbiAgICAgICAgdmVyc2lvbjogcmRzLlBvc3RncmVzRW5naW5lVmVyc2lvbi5WRVJfMTNfNFxuICAgICAgfSksICAgICAgIFxuICAgICAgdnBjIDogdnBjLFxuICAgICAgdnBjU3VibmV0cyA6IHByaXZhdGVTdWJuZXRzLFxuICAgICAgc2VjdXJpdHlHcm91cHM6IFtkYlNlY3VyaXR5R3JvdXBdLFxuICAgICAgZGVsZXRpb25Qcm90ZWN0aW9uIDogZmFsc2UsXG4gICAgICBtdWx0aUF6IDogZmFsc2UsXG4gICAgICBjcmVkZW50aWFscyA6IHtcbiAgICAgICAgdXNlcm5hbWUgOiAncGV0Y2xpbmljJyxcbiAgICAgICAgcGFzc3dvcmQgOiBjZGsuU2VjcmV0VmFsdWUucGxhaW5UZXh0KCdwM3RjbDFuMWMnKVxuICAgICAgfVxuICAgIH0pO1xuICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsICdkYlVSTCcsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnBvc3RncmVzLmRiSW5zdGFuY2VFbmRwb2ludEFkZHJlc3MsXG4gICAgICBkZXNjcmlwdGlvbjogJ0RhdGFiYXNlIGluc3RhbmNlIGVuZHBvaW50LicsXG4gICAgICBleHBvcnROYW1lOiAnZGJFbmRwb2ludCdcbiAgICB9KTsgICAgXG4gIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3QgZ2xvYmFsVGFncyA9IHtcbiAgJ3Byb2plY3QnIDogJ2F3cy1hcHAtcnVubmVyLXdvcmtzaG9wJyxcbiAgJ293bmVyJyA6IHByb2Nlc3MuZW52LlVTRVIhXG59O1xuXG5jb25zdCB2cGNTdGFjayA9IG5ldyBQZXRjbGluaWNWUENTdGFjayhhcHAsICdwZXRjbGluaWMtVlBDLScgKyBwcm9jZXNzLmVudi5VU0VSLCB7XG4gIHRhZ3M6IGdsb2JhbFRhZ3Ncbn0pO1xuXG5jb25zdCBkYlN0YWNrID0gbmV3IFBldGNsaW5pY0RCU3RhY2soYXBwLCAncGV0Y2xpbmljLURCLScgKyBwcm9jZXNzLmVudi5VU0VSLCBcbiAgdnBjU3RhY2sudnBjLCB2cGNTdGFjay5wcml2YXRlU3VibmV0cywgdnBjU3RhY2suZGJTZWN1cml0eUdyb3VwLCB7XG4gIHRhZ3M6IGdsb2JhbFRhZ3Ncbn0pO1xuZGJTdGFjay5hZGREZXBlbmRlbmN5KHZwY1N0YWNrKTtcblxuIl19